import { z } from 'zod';

/**
 * @fileOverview This file contains shared Zod schemas for Genkit flows.
 * It does not have a "use server" directive and can be safely imported
 * into both server and client components. This ensures a single source of truth
 * for our data structures across the application.
 */

/**
 * Defines the schema for a single character, including their name and a
 * description generated by the AI based on the story's context.
 */
export const CharacterSchema = z.object({
  name: z.string().describe('The name of the character.'),
  description: z
    .string()
    .describe(
      'A physical description of the character based on the story text.'
    ),
});
export type Character = z.infer<typeof CharacterSchema>;

/**
 * Defines the schema for a single segment of the story, which can be
 * either dialogue spoken by a character or narrative text. It includes the
 * inferred emotion for the segment, which guides the TTS performance.
 */
export const DialogueSegmentSchema = z.object({
  character: z
    .string()
    .describe(
      'The name of the character speaking, or "Narrator" for narrative text.'
    ),
  dialogue: z
    .string()
    .describe('The dialogue spoken by the character, or narrative text.'),
  emotion: z
    .string()
    .describe(
      'The primary emotion conveyed by the dialogue (e.g., Happy, Sad, Angry, Intrigued, Worried). For the Narrator, this can be "Neutral" or reflect the scene\'s mood.'
    ),
});
export type DialogueSegment = z.infer<typeof DialogueSegmentSchema>;

/**
 * Defines the schema for a single identified literary device, including the
 * device name, the quote where it appears, and an explanation.
 */
export const LiteraryDeviceSchema = z.object({
    device: z.string().describe('The name of the literary device.'),
    quote: z.string().describe('The specific quote from the text that uses the device.'),
    explanation: z.string().describe('A brief explanation of how the quote uses the device.'),
});
export type LiteraryDevice = z.infer<typeof LiteraryDeviceSchema>;

/**
 * Defines the schema for the dialogue dynamics analysis, including metrics
 * for power balance and pacing for each character.
 */
export const DialogueDynamicsSchema = z.object({
  powerBalance: z.array(z.object({
    character: z.string(),
    metrics: z.object({
      dialogueTurns: z.number().describe('Total number of times the character speaks.'),
      wordCount: z.number().describe('Total number of words spoken by the character.'),
      questionsAsked: z.number().describe('Number of questions the character asked.'),
      assertionsMade: z.number().describe('Number of assertive or declarative statements made.'),
    }),
  })).describe('An analysis of the power balance between characters.'),
  pacing: z.object({
    overallWordsPerTurn: z.number().describe('The average number of words per turn for the entire dialogue.'),
    characterPacing: z.array(z.object({
        character: z.string(),
        wordsPerTurn: z.number().describe('The average number of words per turn for this specific character.')
    })),
  }).describe('An analysis of the dialogue pacing.'),
  summary: z.string().describe('A brief, insightful summary of the overall dialogue dynamics, including who is driving the conversation.'),
});
export type DialogueDynamics = z.infer<typeof DialogueDynamicsSchema>;


/**
 * Defines the schema for the trope inversion analysis.
 */
export const TropeSchema = z.object({
  trope: z.string().describe('The name of the identified literary trope (e.g., "The Chosen One").'),
  quote: z.string().describe('The specific quote from the text that exemplifies the trope.'),
  inversionSuggestion: z.string().describe('A creative suggestion for how to subvert or invert the trope.'),
});
export type Trope = z.infer<typeof TropeSchema>;


/**
 * Defines the schema for a single chat message in the Actor's Studio.
 */
export const ChatMessageSchema = z.object({
    isUser: z.boolean(),
    message: z.string(),
});
export type ChatMessage = z.infer<typeof ChatMessageSchema>;

/**
 * Defines the schema for narrator bias modes.
 */
export const NarratorBiasSchema = z.enum([
    "Neutral",
    "Jealous of Main Character",
    "Secretly the Villain",
    "Admires Main Character",
    "Completely Unreliable",
    "Hides a Key Fact"
]);
export type NarratorBias = z.infer<typeof NarratorBiasSchema>;
